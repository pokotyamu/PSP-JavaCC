options{
    STATIC=false;
}

PARSER_BEGIN(ProcessParser)
    import java.lang.*;
    import java.io.*;
    import java.util.*;

    public class ProcessParser{
        public static void print(String path) throws IOException{
            File file = new File(path);
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            while((line = br.readLine()) != null){
                try{
                    System.out.println("hoge "+line);
                    ProcessParser pp = new ProcessParser(new ByteArrayInputStream(line.getBytes()));
                    pp.compilation_unit();
                }catch(ParseException ex){
                    System.out.println(ex);
                }
            }
        }
    }
PARSER_END(ProcessParser)
    
SKIP :
{
          " "
        | "\r"
        | "\t"
        | "\f"
        | "\n"
}

TOKEN :
{
          <LC: "(">
        | <RC: ")">
        | <COM: ",">  
        | <SM: ";">
        | <EQ: "=">
        | <WQ: "\"">
        | <STRING: "String">
        | <DATASET :  "DataSet">
        | <GRAPH: "Graph">
        | <DB: "DB">


}

TOKEN :{
          <IDENTIFIERS: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>

        }
TOKEN :{
          <STR: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9","="])*>
        | <GRAPH_TYPE: (<IDENTIFIERS>)>
        | <TABLE_NAME: (<STR>)>
        | <X_ASIX: (<STR>)>
        | <Y_ASIX: (<STR>)>
        | <PROCESS_NAME: (<STR>)>
}
void compilation_unit(): {
}
{
    condition()
        expression()
}

void condition():{
    String str;
}
{
    str = assignment(){System.out.println(str);}
}

String assignment():{
    String t,t1;
}
{
    t = expressionName()
        <EQ>
        <WQ>
        t1 = assignmentExp()
        <WQ>
        <SM>
        {return t + " = \"" + t1+"\";";}
}

String expressionName():{
    Token t;
}
{
    t = <IDENTIFIERS>
        {return t.image;}
}

String assignmentExp():{
    Token t;
}
{
    t = <STR>{return t.image;}
}

void expression():{
    String exp="";
}
{
    exp = graphExpression()<SM>
        {System.out.println(exp+";");}
}

String graphExpression():{
    String data_exp,graph_type="";
}
{
        <GRAPH>
        <LC>
        data_exp = dataExpression()
        <COM>
        <GRAPH_TYPE>
        <RC>
        <SM>
        { return "Graph.print("+data_exp+","+graph_type+")"; }
}



String dataExpression():{
    String data_exp = "";
}
{
    data_exp = dbExpression()
        {return data_exp;}
}

String processExpression():{
    Token name;
    String input;
}
{
        name = <PROCESS_NAME>
               <LC>
       input = input()
               <RC>
        {return name.image + "("+input+")";}
}

String input():{
    String exp1="",exp2="";
}
{
    exp1 = dataExpression()
        {return exp1;}
        |
        <COM>
        exp2 = dataExpression()
            {return exp1 + ","+exp2;}
}

String dbExpression():{
    String db_input;
}
{
    <DB>
        <LC>
        db_input = dbInput()
        <RC>
        {return "DB("+db_input+")";}
}
String dbInput():{
    Token table_name,x_asix,y_asix,condition;
}
{
    table_name = <TABLE_NAME>
        <COM>
        x_asix = <X_ASIX>
        <COM>
        y_asix = <Y_ASIX>
        <COM>
        condition = <STR>
        {return table_name.image+","+x_asix.image+","+y_asix.image+","+condition.image;}
        
}
