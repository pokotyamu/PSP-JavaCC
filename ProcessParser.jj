options{
    STATIC=false;
}

PARSER_BEGIN(ProcessParser)
    import java.io.*;
    public class ProcessParser{
        public static void print(String path) throws IOException{
            File file = new File(path);
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            while((line = br.readLine()) != null){
                try{
                    ProcessParser pp = new ProcessParser(new ByteArrayInputStream(line.getBytes()));
                    pp.compilation_unit();
                }catch(ParseException ex){
                    System.out.println("parse error");
                }
            }
        }
    }
PARSER_END(ProcessParser)
    
SKIP :
{
    " " | " \r"
}

TOKEN :
{
          <DATASET :  "DataSet">
        | <LC: "(">
        | <RC: ")">
        | <COM: ",">  
        | <NL: "\n">
        | <SM: ";">
        | <EQ: "=">
        | <WQ: "\"">
        }

TOKEN:
{
    <STRING: "String">
}

TOKEN :{
    <IDENTIFIERS: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
        |<SPACE: ([" ","\t","\n","\r","\f"])+>
        }
TOKEN :{
    <STR: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9","="])*>
}
void compilation_unit(): {
}
{
    condition() 
}

void condition():{
    String str;
}
{
    str = assignment(){System.out.println(str);}
}

String assignment():{
    String t,t1;
}
{
    t = expressionName()
        <EQ>
        <WQ>
        t1 = assignmentExp()
        <WQ>
        <SM>
        {return t + " = \"" + t1+"\";";}
}

String expressionName():{
    Token t;
}
{
    t = <IDENTIFIERS>
        {return t.image;}
}

String assignmentExp():{
    Token t;
}
{
    t = <STR>{return t.image;}
}
