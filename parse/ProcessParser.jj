options{
    STATIC=false;
}

PARSER_BEGIN(ProcessParser)

    package parse;

    import java.lang.*;
    import java.io.*;
    import java.util.*;
    import pspdata.*;
    import box.*;

    public class ProcessParser{
        public static Contents parse(String path) throws IOException{
            Contents c = new Contents();
            try{
                ProcessParser pp = new ProcessParser(getBR(path));
                pp.compilation_unit(c);
            }catch(ParseException ex){
                System.out.println(ex);
            }
            return c;
        }
        private static BufferedReader getBR(String path) throws IOException{
            return new BufferedReader(new FileReader(new File(path)));
        }

    }
PARSER_END(ProcessParser)
    
SKIP :
{
          " "
        | "\r"
        | "\t"
        | "\f"
        | "\n"
              
}

TOKEN :
{
          <LC: "(">
        | <RC: ")">
        | <COM: ",">  
        | <SM: ";">
        | <EQ: "=">
        | <WQ: "\"">
        | <STRING: "String">
        | <DATASET :  "DataSet">
        | <GRAPH: "Graph">
        | <DB: "DB"|"CountDB"|"AllDefectCount">

}

TOKEN :{
          <IDENTIFIERS: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
        }
TOKEN :{
          <STR: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9","="])*>
}


void compilation_unit(Contents c): {
}
{
    condition(c)
        expression(c)
}

void condition(Contents c):{
    String str;
}
{
    str = assignment(c)
}

String assignment(Contents c):{
    String t,t1;
}
{
    t = expressionName()
        <EQ>
        <WQ>
        t1 = assignmentExp()
        <WQ>
        <SM>
    {
        c.setCondition(t1);
        return t + " = \"" + t1+"\";";}
}

String expressionName():{
    Token t;
}
{
    t = <IDENTIFIERS>
        {return t.image;}
}

String assignmentExp():{
    Token t;
}
{
    t = <STR>{return t.image;}
}

void expression(Contents c):{
    String exp="";
}
{
    exp = graphExpression(c)<SM>
}

String graphExpression(Contents c):{
    String data_exp;
    Token graph_type;
}
{
        <GRAPH>
        <LC>
        data_exp = dataExpression(c)
        <COM>
        <WQ>
        graph_type = graphType()
        <WQ>
        <RC>
        {
            c.setParser(BoxFactory.createGraphParser(graph_type.image));
            return "Graph.print("+data_exp+","+graph_type.image+")"; }
}



String dataExpression(Contents c):{
    String data_exp = "";
}
{
    data_exp = dbExpression(c)
      {return data_exp;}
    |
        data_exp = processExpression(c)
            {return data_exp;}
}

String processExpression(Contents c):{
    Token name;
    String input;
}
{
    name = processName()
    {   c.addProcess(BoxFactory.createBox(name.image));}
        <LC>
       input = input(c)
               <RC>
        { return name.image + "("+input+")";}
}

String input(Contents c):{
    String exp,temp;
}
{
    exp = dataExpression(c)
        (<COM> temp = dataExpression(c)
            { exp += temp;}
        )*
        { return exp; }
}

String dbExpression(Contents c):{
    String db_input;
    Token db_type;
}
{
    db_type = <DB>
        <LC>
        db_input = dbInput(c,db_type.image)
        <RC>
        {        return "DB("+db_input+")";}
}
String dbInput(Contents c,String db_type):{
    Token table_name,x_asix,y_asix,condition;
}
{
                     <WQ>
        table_name = tableName()
                     <WQ>
        <COM>
                     <WQ>
        x_asix = xAsix()
                     <WQ>
        <COM>
                     <WQ>
        y_asix = yAsix()
                     <WQ>
        <COM>
        condition = <IDENTIFIERS>
        {  c.addProcess(BoxFactory.createDBBox(x_asix.image,y_asix.image,db_type));
            return table_name.image+","+x_asix.image+","+y_asix.image+","+c.getCondition();}
        
}

Token graphType():{
    Token t;
}{
    t = <IDENTIFIERS>{return t;}
}
Token tableName():{
    Token t;
}{
    t = <IDENTIFIERS>{return t;}
}
Token xAsix():{
    Token t;
}{
    t = <IDENTIFIERS>{return t;}
}
Token yAsix():{
    Token t;
}{
    t = <IDENTIFIERS>{return t;}
}
Token processName():{
    Token t;
}{
    t = <IDENTIFIERS>{return t;}
}    

